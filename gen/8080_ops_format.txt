Firstly, everything starts with the names in 8080_ops.txt.
These are translated from, for example, "MVI C, D8" to "MVI C D8", and then to "MVI RB".
This translation is done by splitop and arg_types for the most part.
The translations are as follows:
 adr        : X
 D8         : B
 D16        : BB
 M          : M
 <otherwise>: R (or alternatively the value directly.
 Two translations are performed - one with unknowns set to R, one 
 otherwise. The non-R form is preferred, as it's more specific.)

Next, the resulting 'form' ("RB" in the example case) is looked up in the table opfnargs.
This table describes what additional ('s' is always passed, and refers to the machine register state)
 arguments are passed to the function.
For most cases, the answer is ")" - only the 's' argument is passed.

However, in cases that contain B or X, either 'b' or 'b2'/'b3' arguments are passed.
For RB and B, this is just b - for RBB and X, this is b2 and b3.
In X's case, "local addr = pair(b2, b3)" is added before the function code.

Next, a lookup of the table in 8080_ops.lua is performed with the mnemonic-form (ex. "MVI RB") name.
There are three cases that can occur for how the code is translated, mapped via the table opfnregs:

nil: Nothing happens. This is the case for unknown forms, assuming opfnargs doesn't cause issues.

1: "RP" is replaced with the register pair R is part of (see table "regpair"),
   "R" is replaced with the register name,
   and anything remaining preceding a "P" that is NOT "S" is translated to the 'partner' register (see table "regpartner").

2: "RP1" is replaced with the register pair the first register is part of (see table "regpair"),
   "R1" is replaced with the first register name,
   "RP2" is replaced with the register pair the second register is part of (again, see "regpair"),
   and finally "R2" is replaced with the second register name.

Note that the replacement rules occur in the order specified.

The tables "regpair" and "regpartner" are provided here in a table form
 (idealized - "B,C" -> "pair(s.B, s.C)", and thus cannot be written to)

REG|PAIR|PARTNER|
---|----|-------|
B  |B,C |C      |
C  |    |B      |
---|----|-------|
D  |D,E |E      |
E  |    |D      |
---|----|-------|
H  |H,L |L      |
L  |    |H      |
---|----|-------|
M  |H,L |H,L    | <Notably, this does NOT retrieve the value - it just gives the HL pair.>
SP |SP  |SP     |

--- The 's' class fields ---
(Note: Keep in mind the R/RP/etc. autoreplaces,
       which SHOULD be prefixed with "s." for proper use.)

s.A s.B s.C s.D s.E s.H s.L: Registers
s.SP: Stack Pointer
s.PC: Whatdayathink?
 (Increased by the appropriate amount after execution, no matter what.
  This should be expected.)

s.cy: Carry Flag
s.ac: Aux. Carry Flag
s.p: Parity Flag
s.s: Sign Flag
s.z: Zero Flag
s.int_enable: Interrupt Enable flag

--- Available utility functions ---
flaghandle(s, n, dont_set_carry):
 Takes the (unANDed) 8-bit result of a calculation and adjusts:
 Z: Is the ANDed value zero?
 S: What is bit 7 (sign bit)?
 then returns the ANDed value.

addcda(a, b, cf) / subcda(a, b, cf):
 Returns ANDed result, and AC.
addcdn(a, b, cf) / subcdn(a, b, cf):
 Returns ANDed result, and CY.
addcdb(a, b, cf) / subcdb(a, b, cf):
 Returns ANDed result, AC, and CY.

 Note that in the above functions, "cf" should *generally* be omitted,
  unless this is ADC/SBB, in which case it should be the CY flag.

applyb(s, r, ac, cy)
 Used with addcdb/subcdb to store ac/cy

spair(s, <regname1>, <regname2>, v)
 Writes to pair, and sets Carry accordingly.
 (example: spair(s, "B", "C", 0x1234) sets B to 0x12 and C to 0x34,
   turning off CY.)
